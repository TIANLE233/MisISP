/data3/ltl/miniconda3/envs/rhid/lib/python3.9/site-packages/timm/models/layers/__init__.py:48: FutureWarning: Importing from timm.models.layers is deprecated, please import via timm.layers
  warnings.warn(f"Importing from {__name__} is deprecated, please import via timm.layers", FutureWarning)
2025-06-27 19:03:58,944 INFO: 
                ____                _       _____  ____
               / __ ) ____ _ _____ (_)_____/ ___/ / __ \
              / __  |/ __ `// ___// // ___/\__ \ / /_/ /
             / /_/ // /_/ /(__  )/ // /__ ___/ // _, _/
            /_____/ \__,_//____//_/ \___//____//_/ |_|
     ______                   __   __                 __      __
    / ____/____   ____   ____/ /  / /   __  __ _____ / /__   / /
   / / __ / __ \ / __ \ / __  /  / /   / / / // ___// //_/  / /
  / /_/ // /_/ // /_/ // /_/ /  / /___/ /_/ // /__ / /<    /_/
  \____/ \____/ \____/ \____/  /_____/\____/ \___//_/|_|  (_)
    
Version Information: 
	BasicSR: 1.4.2
	PyTorch: 1.12.1
	TorchVision: 0.13.1
2025-06-27 19:03:58,944 INFO: 
  task_name: ISP
  scale: 2
  num_in_ch: 4
  num_out_ch: 3
  task: isp
  hook_layer_type: Conv2d
  datasets:[
    train:[
      name: MAI_traino
      type: TripleRAWISP4_ZRR
      dataroot_gt: /lab310/LTL_RHID/MAI2021/train/fujifilm/
      dataroot_lq: /lab310/LTL_RHID/MAI2021/train/mediatek_raw/
      dataroot_masko: /data3/ltl/dataset/MAI/train/DL_kpas/mask/
      dataroot_maskp: /data3/ltl/dataset/MAI/train/DL_kpas/mask/
      filename_tmpl: {}
      io_backend:[
        type: disk
      ]
      use_hflip: False
      use_rot: False
      use_shuffle: True
      num_worker_per_gpu: 4
      dataset_enlarge_ratio: 4
      prefetch_mode: None
      phase: train
      scale: 2
    ]
    val_1:[
      name: MAI_val
      type: TripleRAWISP4_ZRR
      dataroot_gt: /data3/ltl/dataset/MAI/val/highsimi/DL/
      dataroot_lq: /data3/ltl/dataset/MAI/val/highsimi/raw/
      dataroot_masko: /data3/ltl/dataset/MAI/val/highsimi/mask/
      dataroot_maskp: /data3/ltl/dataset/MAI/val/highsimi/mask/
      filename_tmpl: {}
      io_backend:[
        type: disk
      ]
      phase: val
      scale: 2
    ]
  ]
  test_datasets:[
    test_4:[
      name: HS2DL_raft-style_4_full_all
      type: TripleRAWISP4
      dataroot_gt: /lab310/LTL_RHID/maindata/DL_png/
      dataroot_lq: /lab310/LTL_RHID/maindata/raw12/set4/
      dataroot_masko: /lab310/LTL_RHID/maindata/DL_png/
      dataroot_maskp: /lab310/LTL_RHID/maindata/DL_png/
      io_backend:[
        type: disk
      ]
    ]
  ]
  analyse_datasets:[
    analyse_0:[
      name: HS2DL-p_raft-style_set3
      type: TripleRAWISP4
      dataroot_gt: /lab310/LTL_RHID/maindata/val/pure/DL_rafts_512/DL/
      dataroot_lq: /lab310/LTL_RHID/maindata/val/pure/raw_512/set3/
      dataroot_masko: /lab310/LTL_RHID/maindata/val/pure/DL_rafts_512/mask/
      dataroot_maskp: /lab310/LTL_RHID/maindata/val/pure/DL_rafts_512/mask/
      io_backend:[
        type: disk
      ]
    ]
  ]
  infer_datasets:[
    infer_0:[
      name: demo
      type: TripleRAWISP4
      dataroot_gt: /data3/ltl/code/RHID_code/demo/Canon
      dataroot_lq: /data3/ltl/code/RHID_code/demo/Revealer/set4
      dataroot_masko: /data3/ltl/code/RHID_code/demo/Canon
      dataroot_maskp: /data3/ltl/code/RHID_code/demo/Canon
      io_backend:[
        type: disk
      ]
    ]
  ]
  cka_datasets:[
    cka_0:[
      name: SIDD_val_10
      type: IRDataset
      dataroot_gt: datasets/denoising_data/SIDD/val_10/gt_crops.lmdb
      dataroot_lq: datasets/denoising_data/SIDD/val_10/input_crops.lmdb
      io_backend:[
        type: lmdb
      ]
      input_size: 288
    ]
  ]
  mad_datasets:[
    mad_0:[
      name: SIDD_val_10
      type: IRDataset
      dataroot_gt: datasets/denoising_data/SIDD/val_10/gt_crops.lmdb
      dataroot_lq: datasets/denoising_data/SIDD/val_10/input_crops.lmdb
      io_backend:[
        type: lmdb
      ]
      input_size: 288
    ]
  ]
  interpret_imgs:[
    img_0:[
      img_path: datasets/demo_data/Urban7/7.png
      w: 110
      h: 150
    ]
  ]
  logger:[
    print_freq: 1000
    save_checkpoint_freq: 5000
    use_tb_logger: True
    wandb:[
      project: None
      resume_id: None
    ]
  ]
  dist_params:[
    backend: nccl
    port: 4000
  ]
  name: LiteISPNet_000_ISP
  model_type: TripleRAWISPModel
  num_gpu: 2
  manual_seed: 42
  bit: 0
  network_g:[
    type: LiteISPNet_noise
    upscale: 2
    num_in_ch: 4
    num_out_ch: 3
    task: isp
  ]
  path:[
    pretrain_network_g: /data3/ltl/code/RHID_code/modelzoo/LiteISPNet/RHID_MisISP.pth
    strict_load_g: True
    resume_state: None
    param_key_g: params_ema
    results_root: /data3/ltl/code/RHID_code/basicsr/results/LiteISPNet_000_ISP
    log: /data3/ltl/code/RHID_code/basicsr/results/LiteISPNet_000_ISP
    visualization: /data3/ltl/code/RHID_code/basicsr/results/LiteISPNet_000_ISP/visualization
  ]
  train:[
    gt_size: 256
    batch_size_per_gpu: 4
    total_iter: 500000
    ema_decay: 0.999
    optim_g:[
      type: Adam
      lr: 0.0001
      weight_decay: 0
      betas: [0.9, 0.999]
    ]
    scheduler:[
      type: CosineAnnealingRestartLR
      periods: [500000]
      restart_weights: [1]
      eta_min: 1e-06
    ]
    pixel_opt:[
      type: L1Loss
      loss_weight: 1.0
      reduction: mean
    ]
  ]
  val:[
    val_freq: 5000
    save_img: True
    suffix: None
    metrics:[
      psnr:[
        type: calculate_psnr
        crop_border: 0
        test_y_channel: False
      ]
    ]
  ]
  dist: True
  rank: 0
  world_size: 1
  auto_resume: False
  is_train: False

2025-06-27 19:03:58,945 INFO: Dataset [TripleRAWISP4] - demo is built.
2025-06-27 19:03:58,945 INFO: Number of infer images in demo: 10
2025-06-27 19:03:59,033 INFO: Network [LiteISPNet_noise] is created.
2025-06-27 19:04:00,446 INFO: Network: DistributedDataParallel - LiteISPNet_noise, with parameters: 9,014,942
2025-06-27 19:04:00,446 INFO: LiteISPNet_noise(
  (head): Conv2d(4, 63, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (down1): Sequential(
    (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): RCAGroup(
      (rg): Sequential(
        (0): RCABlock(
          (res): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (ca): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
        (1): RCABlock(
          (res): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (ca): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
        (2): RCABlock(
          (res): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (ca): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
        (3): RCABlock(
          (res): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (ca): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
        (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (3): DWTForward(64, 256, kernel_size=(2, 2), stride=(2, 2), groups=64, bias=False)
  )
  (down2): Sequential(
    (0): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): RCAGroup(
      (rg): Sequential(
        (0): RCABlock(
          (res): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (ca): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
        (1): RCABlock(
          (res): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (ca): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
        (2): RCABlock(
          (res): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (ca): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
        (3): RCABlock(
          (res): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (ca): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
        (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): DWTForward(64, 256, kernel_size=(2, 2), stride=(2, 2), groups=64, bias=False)
  )
  (down3): Sequential(
    (0): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): RCAGroup(
      (rg): Sequential(
        (0): RCABlock(
          (res): Sequential(
            (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (ca): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
        (1): RCABlock(
          (res): Sequential(
            (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (ca): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
        (2): RCABlock(
          (res): Sequential(
            (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (ca): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
        (3): RCABlock(
          (res): Sequential(
            (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (ca): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
        (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): DWTForward(128, 512, kernel_size=(2, 2), stride=(2, 2), groups=128, bias=False)
  )
  (middle): Sequential(
    (0): Conv2d(512, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): RCAGroup(
      (rg): Sequential(
        (0): RCABlock(
          (res): Sequential(
            (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (ca): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
        (1): RCABlock(
          (res): Sequential(
            (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (ca): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
        (2): RCABlock(
          (res): Sequential(
            (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (ca): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
        (3): RCABlock(
          (res): Sequential(
            (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (ca): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
        (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): RCAGroup(
      (rg): Sequential(
        (0): RCABlock(
          (res): Sequential(
            (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (ca): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
        (1): RCABlock(
          (res): Sequential(
            (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (ca): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
        (2): RCABlock(
          (res): Sequential(
            (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (ca): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
        (3): RCABlock(
          (res): Sequential(
            (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (ca): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
        (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (3): Conv2d(128, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (up3): Sequential(
    (0): DWTInverse(512, 128, kernel_size=(2, 2), stride=(2, 2), groups=128, bias=False)
    (1): RCAGroup(
      (rg): Sequential(
        (0): RCABlock(
          (res): Sequential(
            (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (ca): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
        (1): RCABlock(
          (res): Sequential(
            (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (ca): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
        (2): RCABlock(
          (res): Sequential(
            (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (ca): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
        (3): RCABlock(
          (res): Sequential(
            (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (ca): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
        (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (up2): Sequential(
    (0): DWTInverse(256, 64, kernel_size=(2, 2), stride=(2, 2), groups=64, bias=False)
    (1): RCAGroup(
      (rg): Sequential(
        (0): RCABlock(
          (res): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (ca): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
        (1): RCABlock(
          (res): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (ca): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
        (2): RCABlock(
          (res): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (ca): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
        (3): RCABlock(
          (res): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (ca): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
        (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (up1): Sequential(
    (0): DWTInverse(256, 64, kernel_size=(2, 2), stride=(2, 2), groups=64, bias=False)
    (1): RCAGroup(
      (rg): Sequential(
        (0): RCABlock(
          (res): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (ca): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
        (1): RCABlock(
          (res): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (ca): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
        (2): RCABlock(
          (res): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (ca): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
        (3): RCABlock(
          (res): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (ca): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
        (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (tail): Sequential(
    (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): PixelShuffle(upscale_factor=2)
    (2): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
2025-06-27 19:04:00,518 INFO: Loading LiteISPNet_noise model from /data3/ltl/code/RHID_code/modelzoo/LiteISPNet/RHID_MisISP.pth, with param key: [params_ema].
2025-06-27 19:04:00,587 INFO: Model [TripleRAWISPModel] is created.
2025-06-27 19:04:00,587 INFO: Inferring demo...
Traceback (most recent call last):
  File "/data3/ltl/code/RHID_code/basicsr/infer.py", line 64, in <module>
    infer_pipeline(root_path)
  File "/data3/ltl/code/RHID_code/basicsr/infer.py", line 55, in infer_pipeline
    model.nondist_inference(infer_loader)
  File "/data3/ltl/code/RHID_code/basicsr/models/triplerawisp_model.py", line 597, in nondist_inference
    for idx, val_data in enumerate(dataloader):
  File "/data3/ltl/miniconda3/envs/rhid/lib/python3.9/site-packages/torch/utils/data/dataloader.py", line 681, in __next__
    data = self._next_data()
  File "/data3/ltl/miniconda3/envs/rhid/lib/python3.9/site-packages/torch/utils/data/dataloader.py", line 721, in _next_data
    data = self._dataset_fetcher.fetch(index)  # may raise StopIteration
  File "/data3/ltl/miniconda3/envs/rhid/lib/python3.9/site-packages/torch/utils/data/_utils/fetch.py", line 49, in fetch
    data = [self.dataset[idx] for idx in possibly_batched_index]
  File "/data3/ltl/miniconda3/envs/rhid/lib/python3.9/site-packages/torch/utils/data/_utils/fetch.py", line 49, in <listcomp>
    data = [self.dataset[idx] for idx in possibly_batched_index]
  File "/data3/ltl/code/RHID_code/basicsr/data/triplerawisp_dataset.py", line 75, in __getitem__
    raw_img = np.asarray(imageio.imread(lq_path))
  File "/data3/ltl/miniconda3/envs/rhid/lib/python3.9/site-packages/imageio/v2.py", line 360, in imread
    result = file.read(index=0, **kwargs)
  File "/data3/ltl/miniconda3/envs/rhid/lib/python3.9/site-packages/imageio/core/legacy_plugin_wrapper.py", line 147, in read
    reader = self.legacy_get_reader(**kwargs)
  File "/data3/ltl/miniconda3/envs/rhid/lib/python3.9/site-packages/imageio/core/legacy_plugin_wrapper.py", line 116, in legacy_get_reader
    return self._format.get_reader(self._request)
  File "/data3/ltl/miniconda3/envs/rhid/lib/python3.9/site-packages/imageio/core/format.py", line 221, in get_reader
    return self.Reader(self, request)
  File "/data3/ltl/miniconda3/envs/rhid/lib/python3.9/site-packages/imageio/core/format.py", line 312, in __init__
    self._open(**self.request.kwargs.copy())
  File "/data3/ltl/miniconda3/envs/rhid/lib/python3.9/site-packages/imageio/plugins/freeimage.py", line 87, in _open
    self._bm.load_from_filename(self.request.get_local_filename())
  File "/data3/ltl/miniconda3/envs/rhid/lib/python3.9/site-packages/imageio/plugins/_freeimage.py", line 839, in load_from_filename
    raise ValueError(
ValueError: Could not load bitmap "/data3/ltl/code/RHID_code/demo/Revealer/set4/2044_8.raw": LibRaw : failed to open input stream (unknown format)
ERROR:torch.distributed.elastic.multiprocessing.api:failed (exitcode: 1) local_rank: 0 (pid: 3796281) of binary: /data3/ltl/miniconda3/envs/rhid/bin/python3
Traceback (most recent call last):
  File "/data3/ltl/miniconda3/envs/rhid/lib/python3.9/runpy.py", line 197, in _run_module_as_main
    return _run_code(code, main_globals, None,
  File "/data3/ltl/miniconda3/envs/rhid/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/data3/ltl/miniconda3/envs/rhid/lib/python3.9/site-packages/torch/distributed/run.py", line 765, in <module>
    main()
  File "/data3/ltl/miniconda3/envs/rhid/lib/python3.9/site-packages/torch/distributed/elastic/multiprocessing/errors/__init__.py", line 345, in wrapper
    return f(*args, **kwargs)
  File "/data3/ltl/miniconda3/envs/rhid/lib/python3.9/site-packages/torch/distributed/run.py", line 761, in main
    run(args)
  File "/data3/ltl/miniconda3/envs/rhid/lib/python3.9/site-packages/torch/distributed/run.py", line 752, in run
    elastic_launch(
  File "/data3/ltl/miniconda3/envs/rhid/lib/python3.9/site-packages/torch/distributed/launcher/api.py", line 131, in __call__
    return launch_agent(self._config, self._entrypoint, list(args))
  File "/data3/ltl/miniconda3/envs/rhid/lib/python3.9/site-packages/torch/distributed/launcher/api.py", line 245, in launch_agent
    raise ChildFailedError(
torch.distributed.elastic.multiprocessing.errors.ChildFailedError: 
============================================================
basicsr/infer.py FAILED
------------------------------------------------------------
Failures:
  <NO_OTHER_FAILURES>
------------------------------------------------------------
Root Cause (first observed failure):
[0]:
  time      : 2025-06-27_19:04:01
  host      : server02
  rank      : 0 (local_rank: 0)
  exitcode  : 1 (pid: 3796281)
  error_file: <N/A>
  traceback : To enable traceback see: https://pytorch.org/docs/stable/elastic/errors.html
============================================================
/data3/ltl/miniconda3/envs/rhid/lib/python3.9/site-packages/timm/models/layers/__init__.py:48: FutureWarning: Importing from timm.models.layers is deprecated, please import via timm.layers
  warnings.warn(f"Importing from {__name__} is deprecated, please import via timm.layers", FutureWarning)
2025-06-27 19:09:27,628 INFO: 
                ____                _       _____  ____
               / __ ) ____ _ _____ (_)_____/ ___/ / __ \
              / __  |/ __ `// ___// // ___/\__ \ / /_/ /
             / /_/ // /_/ /(__  )/ // /__ ___/ // _, _/
            /_____/ \__,_//____//_/ \___//____//_/ |_|
     ______                   __   __                 __      __
    / ____/____   ____   ____/ /  / /   __  __ _____ / /__   / /
   / / __ / __ \ / __ \ / __  /  / /   / / / // ___// //_/  / /
  / /_/ // /_/ // /_/ // /_/ /  / /___/ /_/ // /__ / /<    /_/
  \____/ \____/ \____/ \____/  /_____/\____/ \___//_/|_|  (_)
    
Version Information: 
	BasicSR: 1.4.2
	PyTorch: 1.12.1
	TorchVision: 0.13.1
2025-06-27 19:09:27,628 INFO: 
  task_name: ISP
  scale: 2
  num_in_ch: 4
  num_out_ch: 3
  task: isp
  hook_layer_type: Conv2d
  datasets:[
    train:[
      name: MAI_traino
      type: TripleRAWISP4_ZRR
      dataroot_gt: /lab310/LTL_RHID/MAI2021/train/fujifilm/
      dataroot_lq: /lab310/LTL_RHID/MAI2021/train/mediatek_raw/
      dataroot_masko: /data3/ltl/dataset/MAI/train/DL_kpas/mask/
      dataroot_maskp: /data3/ltl/dataset/MAI/train/DL_kpas/mask/
      filename_tmpl: {}
      io_backend:[
        type: disk
      ]
      use_hflip: False
      use_rot: False
      use_shuffle: True
      num_worker_per_gpu: 4
      dataset_enlarge_ratio: 4
      prefetch_mode: None
      phase: train
      scale: 2
    ]
    val_1:[
      name: MAI_val
      type: TripleRAWISP4_ZRR
      dataroot_gt: /data3/ltl/dataset/MAI/val/highsimi/DL/
      dataroot_lq: /data3/ltl/dataset/MAI/val/highsimi/raw/
      dataroot_masko: /data3/ltl/dataset/MAI/val/highsimi/mask/
      dataroot_maskp: /data3/ltl/dataset/MAI/val/highsimi/mask/
      filename_tmpl: {}
      io_backend:[
        type: disk
      ]
      phase: val
      scale: 2
    ]
  ]
  test_datasets:[
    test_4:[
      name: HS2DL_raft-style_4_full_all
      type: TripleRAWISP4
      dataroot_gt: /lab310/LTL_RHID/maindata/DL_png/
      dataroot_lq: /lab310/LTL_RHID/maindata/raw12/set4/
      dataroot_masko: /lab310/LTL_RHID/maindata/DL_png/
      dataroot_maskp: /lab310/LTL_RHID/maindata/DL_png/
      io_backend:[
        type: disk
      ]
    ]
  ]
  analyse_datasets:[
    analyse_0:[
      name: HS2DL-p_raft-style_set3
      type: TripleRAWISP4
      dataroot_gt: /lab310/LTL_RHID/maindata/val/pure/DL_rafts_512/DL/
      dataroot_lq: /lab310/LTL_RHID/maindata/val/pure/raw_512/set3/
      dataroot_masko: /lab310/LTL_RHID/maindata/val/pure/DL_rafts_512/mask/
      dataroot_maskp: /lab310/LTL_RHID/maindata/val/pure/DL_rafts_512/mask/
      io_backend:[
        type: disk
      ]
    ]
  ]
  infer_datasets:[
    infer_0:[
      name: demo
      type: TripleRAWISP4
      dataroot_gt: /data3/ltl/code/RHID_code/demo/Canon
      dataroot_lq: /data3/ltl/code/RHID_code/demo/Revealer/set4
      dataroot_masko: /data3/ltl/code/RHID_code/demo/Canon
      dataroot_maskp: /data3/ltl/code/RHID_code/demo/Canon
      io_backend:[
        type: disk
      ]
    ]
  ]
  cka_datasets:[
    cka_0:[
      name: SIDD_val_10
      type: IRDataset
      dataroot_gt: datasets/denoising_data/SIDD/val_10/gt_crops.lmdb
      dataroot_lq: datasets/denoising_data/SIDD/val_10/input_crops.lmdb
      io_backend:[
        type: lmdb
      ]
      input_size: 288
    ]
  ]
  mad_datasets:[
    mad_0:[
      name: SIDD_val_10
      type: IRDataset
      dataroot_gt: datasets/denoising_data/SIDD/val_10/gt_crops.lmdb
      dataroot_lq: datasets/denoising_data/SIDD/val_10/input_crops.lmdb
      io_backend:[
        type: lmdb
      ]
      input_size: 288
    ]
  ]
  interpret_imgs:[
    img_0:[
      img_path: datasets/demo_data/Urban7/7.png
      w: 110
      h: 150
    ]
  ]
  logger:[
    print_freq: 1000
    save_checkpoint_freq: 5000
    use_tb_logger: True
    wandb:[
      project: None
      resume_id: None
    ]
  ]
  dist_params:[
    backend: nccl
    port: 4000
  ]
  name: LiteISPNet_000_ISP
  model_type: TripleRAWISPModel
  num_gpu: 2
  manual_seed: 42
  bit: 0
  network_g:[
    type: LiteISPNet_noise
    upscale: 2
    num_in_ch: 4
    num_out_ch: 3
    task: isp
  ]
  path:[
    pretrain_network_g: /data3/ltl/code/RHID_code/modelzoo/LiteISPNet/RHID_MisISP.pth
    strict_load_g: True
    resume_state: None
    param_key_g: params_ema
    results_root: /data3/ltl/code/RHID_code/basicsr/results/LiteISPNet_000_ISP
    log: /data3/ltl/code/RHID_code/basicsr/results/LiteISPNet_000_ISP
    visualization: /data3/ltl/code/RHID_code/basicsr/results/LiteISPNet_000_ISP/visualization
  ]
  train:[
    gt_size: 256
    batch_size_per_gpu: 4
    total_iter: 500000
    ema_decay: 0.999
    optim_g:[
      type: Adam
      lr: 0.0001
      weight_decay: 0
      betas: [0.9, 0.999]
    ]
    scheduler:[
      type: CosineAnnealingRestartLR
      periods: [500000]
      restart_weights: [1]
      eta_min: 1e-06
    ]
    pixel_opt:[
      type: L1Loss
      loss_weight: 1.0
      reduction: mean
    ]
  ]
  val:[
    val_freq: 5000
    save_img: True
    suffix: None
    metrics:[
      psnr:[
        type: calculate_psnr
        crop_border: 0
        test_y_channel: False
      ]
    ]
  ]
  dist: True
  rank: 0
  world_size: 1
  auto_resume: False
  is_train: False

2025-06-27 19:09:27,629 INFO: Dataset [TripleRAWISP4] - demo is built.
2025-06-27 19:09:27,629 INFO: Number of infer images in demo: 10
2025-06-27 19:09:27,717 INFO: Network [LiteISPNet_noise] is created.
2025-06-27 19:09:29,163 INFO: Network: DistributedDataParallel - LiteISPNet_noise, with parameters: 9,014,942
2025-06-27 19:09:29,163 INFO: LiteISPNet_noise(
  (head): Conv2d(4, 63, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (down1): Sequential(
    (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): RCAGroup(
      (rg): Sequential(
        (0): RCABlock(
          (res): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (ca): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
        (1): RCABlock(
          (res): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (ca): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
        (2): RCABlock(
          (res): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (ca): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
        (3): RCABlock(
          (res): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (ca): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
        (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (3): DWTForward(64, 256, kernel_size=(2, 2), stride=(2, 2), groups=64, bias=False)
  )
  (down2): Sequential(
    (0): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): RCAGroup(
      (rg): Sequential(
        (0): RCABlock(
          (res): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (ca): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
        (1): RCABlock(
          (res): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (ca): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
        (2): RCABlock(
          (res): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (ca): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
        (3): RCABlock(
          (res): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (ca): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
        (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): DWTForward(64, 256, kernel_size=(2, 2), stride=(2, 2), groups=64, bias=False)
  )
  (down3): Sequential(
    (0): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): RCAGroup(
      (rg): Sequential(
        (0): RCABlock(
          (res): Sequential(
            (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (ca): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
        (1): RCABlock(
          (res): Sequential(
            (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (ca): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
        (2): RCABlock(
          (res): Sequential(
            (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (ca): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
        (3): RCABlock(
          (res): Sequential(
            (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (ca): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
        (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): DWTForward(128, 512, kernel_size=(2, 2), stride=(2, 2), groups=128, bias=False)
  )
  (middle): Sequential(
    (0): Conv2d(512, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): RCAGroup(
      (rg): Sequential(
        (0): RCABlock(
          (res): Sequential(
            (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (ca): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
        (1): RCABlock(
          (res): Sequential(
            (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (ca): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
        (2): RCABlock(
          (res): Sequential(
            (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (ca): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
        (3): RCABlock(
          (res): Sequential(
            (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (ca): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
        (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): RCAGroup(
      (rg): Sequential(
        (0): RCABlock(
          (res): Sequential(
            (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (ca): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
        (1): RCABlock(
          (res): Sequential(
            (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (ca): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
        (2): RCABlock(
          (res): Sequential(
            (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (ca): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
        (3): RCABlock(
          (res): Sequential(
            (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (ca): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
        (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (3): Conv2d(128, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (up3): Sequential(
    (0): DWTInverse(512, 128, kernel_size=(2, 2), stride=(2, 2), groups=128, bias=False)
    (1): RCAGroup(
      (rg): Sequential(
        (0): RCABlock(
          (res): Sequential(
            (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (ca): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
        (1): RCABlock(
          (res): Sequential(
            (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (ca): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
        (2): RCABlock(
          (res): Sequential(
            (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (ca): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
        (3): RCABlock(
          (res): Sequential(
            (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (ca): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(8, 128, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
        (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (up2): Sequential(
    (0): DWTInverse(256, 64, kernel_size=(2, 2), stride=(2, 2), groups=64, bias=False)
    (1): RCAGroup(
      (rg): Sequential(
        (0): RCABlock(
          (res): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (ca): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
        (1): RCABlock(
          (res): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (ca): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
        (2): RCABlock(
          (res): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (ca): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
        (3): RCABlock(
          (res): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (ca): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
        (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (up1): Sequential(
    (0): DWTInverse(256, 64, kernel_size=(2, 2), stride=(2, 2), groups=64, bias=False)
    (1): RCAGroup(
      (rg): Sequential(
        (0): RCABlock(
          (res): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (ca): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
        (1): RCABlock(
          (res): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (ca): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
        (2): RCABlock(
          (res): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (ca): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
        (3): RCABlock(
          (res): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (ca): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
        (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (tail): Sequential(
    (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): PixelShuffle(upscale_factor=2)
    (2): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
2025-06-27 19:09:29,224 INFO: Loading LiteISPNet_noise model from /data3/ltl/code/RHID_code/modelzoo/LiteISPNet/RHID_MisISP.pth, with param key: [params_ema].
2025-06-27 19:09:29,315 INFO: Model [TripleRAWISPModel] is created.
2025-06-27 19:09:29,315 INFO: Inferring demo...
2025-06-27 19:09:35,872 INFO: Inference ended. The results are saved to results/LiteISPNet_000_ISP/visualization/inference.
